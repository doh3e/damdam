version: '3.8'

services:
  postgres:
    image: postgres:17
    container_name: postgres
    environment:
      - POSTGRES_DB=damdam
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=ssafy
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - db-data:/var/lib/postgresql/data

  redis:
    image: redis:6
    container_name: redis
    # Redis 설정을 CLI 플래그로 직접 전달
    command: [
      "redis-server",
      "--requirepass", "ssafy!@",
      "--maxmemory", "1gb",
      "--maxmemory-policy", "allkeys-lru"
    ]
    ports:
      - "6379:6379"
    networks:
      - app-network

  backend:
    build:
      context: ./backend
    container_name: backend
    ports:
      - "8080:8080"
    depends_on:
      - ai-data
      - ai-audio
      - postgres
      - redis

    volumes:
      # 보안용 API-KEY 프로퍼티 파일 (절대경로)
      - /home/ubuntu/S12P31S202/backend/damdam/src/main/resources/application-API-KEY.properties:/config/application-API-KEY.properties:ro
      # 로컬용 프로퍼티 파일 (상대경로)
      - ./backend/damdam/src/main/resources/application-local.properties:/config/application-local.properties:ro

    environment:
      # /config 디렉토리의 모든 application-*.properties 파일을 추가로 로드
      - SPRING_CONFIG_ADDITIONAL_LOCATION=file:/config/

      # 활성 프로파일 (API-KEY 먼저, 그 다음 local)
      - SPRING_PROFILES_ACTIVE=API-KEY,local

      # Jenkins Credentials 로 주입된 JWT 시크릿
      - SPRING_JWT_SECRET

      # 나머지 env-vars
      - FASTAPI_BASE_URL=http://ai-data:8001
      - AUDIO_SERVICE_URL=http://ai-audio:8002
      - POSTGRE_URL=jdbc:postgresql://postgres:5432/damdam
      - POSTGRE_USERNAME=postgres
      - POSTGRE_PASSWORD=ssafy
      - REDIS_HOST=redis
      - REDIS_PASSWORD=ssafy!@

    networks:
      - app-network
  # backend:
  #   build:
  #     context: ./backend
  #   container_name: backend
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     - ai-data
  #     - ai-audio
  #     - postgres
  #     - redis

  #   # 외부 props 파일 마운트
  #   volumes:
  #     - ./backend/src/main/resources/application-API-KEY.properties:/config/application-API-KEY.properties:ro

  #   environment:
  #     # application-API-KEY.properties 파일을 추가로 로드
  #     - SPRING_CONFIG_ADDITIONAL_LOCATION=file:/config/application-API-KEY.properties

  #     # 활성 프로파일 (API-KEY 프로파일이 먼저 와야 위 파일이 적용됩니다)
  #     - SPRING_PROFILES_ACTIVE=API-KEY,local

  #     # Jenkins Credentials 로 주입된 JWT 시크릿
  #     - SPRING_JWT_SECRET

  #     # 나머지 env-vars
  #     - FASTAPI_BASE_URL=http://ai-data:8001
  #     - AUDIO_SERVICE_URL=http://ai-audio:8002
  #     - POSTGRE_URL=jdbc:postgresql://postgres:5432/damdam
  #     - POSTGRE_USERNAME=postgres
  #     - POSTGRE_PASSWORD=ssafy
  #     - REDIS_HOST=redis
  #     - REDIS_PASSWORD=ssafy!@

  #   networks:
  #     - app-network
  frontend:
    build:
      context: ./frontend
      args:
        NEXT_PUBLIC_DAMDAM_BASE_URL: "https://k12s202.p.ssafy.io/api/v1/damdam"
        NEXT_PUBLIC_WEBSOCKET_URL:    "wss://k12s202.p.ssafy.io/ws-connect"
        NEXT_PUBLIC_GOOGLE_LOGIN_URL: "https://k12s202.p.ssafy.io/oauth2/authorization/google"
        NEXT_PUBLIC_NAVER_LOGIN_URL:  "https://k12s202.p.ssafy.io/oauth2/authorization/naver"
        NEXT_PUBLIC_KAKAO_LOGIN_URL:  "https://k12s202.p.ssafy.io/oauth2/authorization/kakao"

        OPENAI_API_KEY: "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"

    environment:
      - NODE_ENV=production      # 런타임에서도 NODE_ENV 확인용
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "3000:3000"     
  ai-data:
    image: hashicorp/http-echo:latest
    container_name: ai-data
    command: ["-text={\"status\":\"up\"}", "-status-code=200", "-listen=:8001"]
    ports:
      - "8001:8001"
    networks:
      - app-network

  ai-audio:
    image: hashicorp/http-echo:latest
    container_name: ai-analyze
    command: ["-text={\"status\":\"up\"}", "-status-code=200", "-listen=:8002"]
    ports:
      - "8002:8002"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
